ESP8266

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/315afcf7-fc3a-4ad0-a855-620a8bb01daa 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int gas_data;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
Arduino_h
#include "thingProperties.h"
int gas_sensor=34;
void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  pinMode(gas_sensor,INPUT);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  gas_data=analogRead(gas_sensor);
  
}

void onGasDataChange(){
  
}










codigo do chat



#include "thingProperties.h"
int gas_sensor = A0;  // Assuming gas sensor is connected to analog pin A0 on Arduino UNO

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
  pinMode(gas_sensor, INPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Uncomment the following line and update the Wi-Fi credentials for ESP8266
  // ArduinoCloud.begin(ArduinoIoTPreferredConnection, "your-ssid", "your-password");

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  gas_data = analogRead(gas_sensor);
}

void onGasDataChange() {
  // Code to handle gas data change
}

















tentativa 




#include <SoftwareSerial.h>
#include <Servo.h>

SoftwareSerial esp8266 12


#define pinBuzzer 13
#define pinPIR 7
#define SERVO 8 // Porta Digital 8 PWM
#define pinLed 9

Servo s; // Variável tipo Servo
int pos; // Posição Servo
String senData (String command, const int timeout, bool debug);



void setup() {
  s.attach(SERVO);
  s.write(0); // Inicia o motor na posição zero
  pinMode(pinPIR, INPUT); //DEFINE O PINO COMO ENTRADA
  pinMode(pinBuzzer, OUTPUT);
  pinMode(pinLed, OUTPUT);
  
  Serial.begin(9600);//INICIALIZA A SERIAL
  esp8266.begin(19200);


  sendData("AT+RST\r\n", 2000, DEBUG); //rst
  //conecta  a rede  wireless
}

void loop() {
  bool valorPIR = digitalRead(pinPIR);
  bool tipoBuzzer = 0;

  if (valorPIR) {
    Serial.println("DETECTADO");
    digitalWrite(pinBuzzer, 50);
    digitalWrite(pinLed, HIGH);
    s.write(75);
    delay(15);
  } else {
     Serial.println("NÃO DETECTADO");
     digitalWrite(pinBuzzer, LOW);
     digitalWrite(pinLed, LOW);
     for (pos = 70; pos >= 0; pos--)
    {
      s.write(0);
      delay(1000); 
    }
  }
     delay(1000); 
}
